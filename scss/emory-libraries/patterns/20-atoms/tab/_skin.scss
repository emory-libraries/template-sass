////
/// @group emory-libraries.patterns.atoms.tab
////

/// Defines the base skin of the tab component.
///
/// @since 1.0.0
///
/// @type map
$atoms-tab: (

  'transition': (
    'duration': $transition-duration,
    'timing': $transition-timing
  ),
  'divider': 1em,
  'indicator': 30px,

  'theme': "light",
  "themes": (
    'light': (
      'background': color('white'),
      'foreground': (
        'normal': color('blue', 'mid'),
        'hover': $color-actionable,
        'active': $color-actionable
      ),
      'border': (
        'color': rgba(color('slate'), .5),
        'thickness': $border-width-s
      )
    ),
    'dark': (
      'background': color('blue', 'dark'),
      'foreground': (
        'normal': color('white'),
        'hover': color('slate'),
        'active': color('gold')
      ),
      'border': (
        'color': rgba(color('slate', 'light'), .25),
        'thickness': $border-width-s
      )
    )
  )

);


/// Defines the tab component theme.
///
/// @since 1.0.0
///
/// @requires {mixin} tokens-heading
/// @requires {mixin} tokens-icon
/// @requires {function} Brandy::map-deep-get <https://laurenhamel.github.io/brandy/docs/#brandy-maps-function-map-deep-get>
/// @requires {function} Brandy::linear-gradient <https://laurenhamel.github.io/brandy/docs/#brandy-colors-mixin-linear-gradient>
/// @requires {mixin} Brandy::size <https://laurenhamel.github.io/brandy/docs/#brandy-layout-mixin-size>
///
/// @param {map} skin - The component's skin
///
/// @output The tab component's themeable properties
@mixin atoms-tab--theme ( $skin ) {

  // Capture the selector.
  $selector: &;

  // Captures themeable variables.
  $theme: map-deep-get($skin, 'theme');
  $themes: map-deep-get($skin, 'themes');
  $divider: map-deep-get($skin, 'divider');
  $indicator: map-deep-get($skin, 'indicator');

  // Get transition-specific variables.
  $transition-duration: map-deep-get($skin, 'transition.duration');
  $transition-timing: map-deep-get($skin, 'transition.timing');

  // Get theme-specific variables.
  $theme-foreground: map-deep-get($themes, $theme + '.foreground.normal');
  $theme-background: map-deep-get($themes, $theme + '.background');
  $theme-border-color: map-deep-get($themes, $theme + '.border.color');
  $theme-border-thickness: map-deep-get($themes, $theme + '.border.thickness');

  // Build tab component styles.
  @include tokens-heading('h6', $theme-foreground);
  transition: all $transition-duration $transition-timing;

  // Builds styles for smaller screens.
  @include breakpoint-s-m {
    padding-left: $indicator;
    font-weight: normal;
    text-transform: none;

    &::before {
      @include size($indicator);
    }

  };

  // Builds styles for larger screens.
  @include breakpoint-l {
    text-align: center;

    // Add divider between subsequent tabs.
    & + &::before {
      height: $divider;
      width: $theme-border-thickness;
      background-color: $theme-border-color;
    }

  };

  // Add tab states.
  @include atoms-tab--state('normal', $skin);
  @include atoms-tab--state('hover', $skin);
  @include atoms-tab--state('focus', $skin);
  @include atoms-tab--state('active', $skin);

  // Build tab menu styles.
  &-menu {
    background-color: $theme-background;

    // Add a horizontal rule to the tab menu.
    &::after {
      height: $theme-border-thickness;
      background-color: $theme-border-color;
    }

  }

  // Build tab switch styles.
  &-switch {

    // Show the tab's active state when the switch is enabled.
    &:checked + #{$selector} {
      @include atoms-tab--state('active', $skin, $selector);
    }

    // Hide the tab's active state when the switch is disabled.
    &:not(:checked) + #{$selector} {
      @include atoms-tab--state('normal', $skin, $selector);
    }

  }

  // Apply theme-specific styles for the component.
  @each $theme, $settings in $themes {

    // Get theme-specific variables.
    $theme-foreground: map-deep-get($settings, 'foreground.normal');
    $theme-background: map-deep-get($settings, 'background');
    $theme-border-color: map-deep-get($settings, 'border.color');
    $theme-border-thickness: map-deep-get($settings, 'border.thickness');

    // Apply theme-specific styles.
    &-menu.-#{$theme} {
      background-color: $theme-background;

      // Modifies horizontal rule of the tab menu.
      &::after {
        height: $theme-border-thickness;
        background-color: $theme-border-color;
      }

      // Override tab styles.
      #{$selector} {
        color: $theme-foreground;

        // Modifies divider between to subsequent tabs.
        & + &::before {
          background-color: $theme-border-color;
          width: $theme-border-thickness;
        }

      }

    }

  }

}

/// Defines the tab component state.
///
/// @since 1.0.0
///
/// @requires {function} Brandy::map-deep-get <https://laurenhamel.github.io/brandy/docs/#brandy-maps-function-map-deep-get>
///
/// @param {string} state - The component's state to be styled
/// @param {map} skin - The component's skin
///
/// @output The tab component's themeable properties
@mixin atoms-tab--state( $state, $skin: $atoms-tab, $selector: true ) {

  // For focus states, use the hover state styles.
  $target: if($state == 'focus', 'hover', if($state == 'inactive', 'active', $state));

  // Get theme-specific variables.
  $theme-default: map-deep-get($skin, 'theme');
  $themes: map-deep-get($skin, 'themes');

  // Get skinable variables.
  $indicator: map-deep-get($skin, 'indicator');

  // Capture the selector class.
  $selector-class: &;

  @if( $selector == true and $state != 'normal' ) {

    // Add theme-specific states.
    @each $theme, $settings in $themes {

      // Get theme-specific variables.
      $theme-foreground: map-get($settings, 'foreground');
      $theme-background: map-get($settings, 'background');

      // Get state-specific variables based on theme-specific variables.
      $state-foreground: map-deep-get($theme-foreground, $target);

      // Build the targeted state selector.
      $selector-state: unquote(if($theme == $theme-default, glue((
        '&:#{$state}',
        '&.is-#{$state}',
        '#{$selector-class}-menu:not(.-dropdown).-#{$theme} &:#{$state}',
        '#{$selector-class}-menu:not(.-dropdown).-#{$theme} &.is-#{$state}'
      ), ', '), glue((
        '#{$selector-class}-menu:not(.-dropdown).-#{$theme} &:#{$state}',
        '#{$selector-class}-menu:not(.-dropdown).-#{$theme} &.is-#{$state}'
      ), ', ')));

      // Apply all state-specific styles for the given theme.
      #{$selector-state} {
        color: $state-foreground;

        // Add an indicator when active.
        @if( $state == 'active' ) {

          // For smaller screens, add indicators at the left of the tab.
          @include breakpoint-s-m {

            &::before {
              content: icon-url('material-arrow_right', $state-foreground, $indicator);
            };

          };

          // For larger screens, add indicators below the tab.
          @include breakpoint-l {

            &::after {
              content: icon-url('material-arrow_drop_down', $state-foreground, $indicator);
            }

          };

        }

        // Otherwise, remove indicators when not active.
        @else {

          // For smaller screens, remove indicators at the left of the tab.
          @include breakpoint-s-m {

            &::before {
              content: none;
            };

          };

          // For larger screens, remove indicators below the tab.
          @include breakpoint-l {

            &::after {
              content: none;
            }

          };

        }

      }

    }

  }

  @else {

    // Add theme-specific states.
    @each $theme, $settings in $themes {

      // Get theme-specific variables.
      $theme-foreground: map-get($settings, 'foreground');
      $theme-background: map-get($settings, 'background');

      // Get state-specific variables based on theme-specific variables.
      $state-foreground: map-deep-get($theme-foreground, $target);

      // Apply all state-specific styles for the given theme.
      @if( $theme == $theme-default ) {
        color: $state-foreground;

        // Add an indicator when active.
        @if( $state == 'active' ) {

          // For smaller screens, add indicators at the left of the tab.
          @include breakpoint-s-m {

            &::before {
              content: icon-url('material-arrow_right', $state-foreground, $indicator);
            };

          };

          // For larger screens, add indicators below the tab.
          @include breakpoint-l {

            &::after {
              content: icon-url('material-arrow_drop_down', $state-foreground, $indicator);
              @include linear-gradient(
                to bottom,
                transparent 45%,
                $theme-background 45%,
                $theme-background 55%,
                transparent 55%
              );
            }

          };

        }

        // Otherwise, remove indicators when not active.
        @else {

          // For smaller screens, remove indicators at the left of the tab.
          @include breakpoint-s-m {

            &::before {
              content: none;
            };

          };

          // For larger screens, remove indicators below the tab.
          @include breakpoint-l {

            &::after {
              content: none;
            }

          };

        }

      }

      @if( $selector != false ) {

        // Also, add state-specific styles within its themed menu.
        @at-root #{$selector}-menu:not(.-dropdown).-#{$theme} & {
          color: $state-foreground;

          // Add an indicator when active.
          @if( $state == 'active' ) {

            // For smaller screens, add indicators at the left of the tab.
            @include breakpoint-s-m {

              &::before {
                content: icon-url('material-arrow_right', $state-foreground, $indicator);
              };

            };

            // For larger screens, add indicators below the tab.
            @include breakpoint-l {

              &::after {
                content: icon-url('material-arrow_drop_down', $state-foreground, $indicator);
                @include linear-gradient(
                  to bottom,
                  transparent 45%,
                  $theme-background 45%,
                  $theme-background 55%,
                  transparent 55%
                );
              }

            };

          }

          // Otherwise, remove indicators when not active.
          @else {

            // For smaller screens, remove indicators at the left of the tab.
            @include breakpoint-s-m {

              &::before {
                content: none;
              };

            };

            // For larger screens, remove indicators below the tab.
            @include breakpoint-l {

              &::after {
                content: none;
              }

            };

          }

        }

      }

    }

  }

}
