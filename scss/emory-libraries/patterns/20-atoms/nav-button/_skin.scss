////
/// @group emory-libraries.patterns.atoms.nav-button
////

/// Defines the base skin of the nav-button component.
///
/// @since 1.0.0
///
/// @type map
$atoms-nav-button: (

  'main': (
    'foreground': (
      'normal': (
        's': color('white'),
        'm': color('blue', 'dark'),
        'l': color('blue', 'dark')
      ),
      'hover': (
        's': color('white'),
        'm': $color-actionable,
        'l': $color-actionable
      ),
      'active': (
        's': color('white'),
        'm': $color-actionable,
        'l': $color-actionable
      )
    ),
    'background': (
      'normal': (
        's': color('blue', 'dark'),
        'm': color('white'),
        'l': color('white')
      ),
      'hover': (
        's': color('blue'),
        'm': color('white'),
        'l': color('white')
      ),
      'active': (
        's': color('blue'),
        'm': color('white'),
        'l': color('white')
      )
    ),
    'font': (
      'font-family': font('body'),
      'font-weight': bold,
      'font-style': normal,
      'font-size': (
        's': $font-size,
        'm': 14px,
        'l': 14px
      ),
      'line-height': (
        's': 2.0625,
        'm': 1.5,
        'l': 1.5
      ),
      'text-transform': (
        's': none,
        'm': none,
        'l': none
      ),
      'letter-spacing': (
        's': normal,
        'm': normal,
        'l': normal
      )
    ),
    'border': (
      'thickness': $border-width-s,
      'color': color('slate', 'light')
    )
  ),

  'utility': (
    'foreground': (
      'normal': (
        's': color('white'),
        'm': color('blue', 'mid'),
        'l': color('blue', 'mid')
      ),
      'hover': (
        's': color('white'),
        'm': $color-actionable,
        'l': $color-actionable
      ),
      'active': (
        's': color('white'),
        'm': $color-actionable,
        'l': $color-actionable
      )
    ),
    'background': (
      'normal': (
        's': color('blue', 'dark'),
        'm': color('white'),
        'l': color('white')
      ),
      'hover': (
        's': color('blue'),
        'm': color('white'),
        'l': color('white')
      ),
      'active': (
        's': color('blue'),
        'm': color('white'),
        'l': color('white')
      )
    ),
    'font': (
      'font-family': font('body'),
      'font-weight': bold,
      'font-style': normal,
      'font-size': (
        's': $font-size,
        'm': 11px,
        'l': 11px
      ),
      'line-height': (
        's': 2.0625,
        'm': 1.6364,
        'l': 1.6364
      ),
      'text-transform': (
        's': normal,
        'm': uppercase,
        'l': uppercase
      ),
      'letter-spacing': (
        's': none,
        'm': 0.05em,
        'l': 0.05em
      )
    )
  ),

  'flyout': (
    'foreground': (
      'normal': (
        's': color('blue', 'mid'),
        'm': color('blue', 'mid'),
        'l': color('blue', 'mid')
      ),
      'hover': (
        's': $color-actionable,
        'm': $color-actionable,
        'l': $color-actionable
      ),
      'active': (
        's': $color-actionable,
        'm': $color-actionable,
        'l': $color-actionable
      )
    ),
    'background': (
      'normal': (
        's': color('white'),
        'm': color('white'),
        'l': color('white')
      ),
      'hover': (
        's': color('white'),
        'm': color('white'),
        'l': color('white')
      ),
      'active': (
        's': color('white'),
        'm': color('white'),
        'l': color('white')
      )
    ),
    'font': (
      'font-family': font('body'),
      'font-weight': bold,
      'font-style': normal,
      'font-size': (
        's': 9px,
        'm': 11px,
        'l': 11px
      ),
      'line-height': (
        's': 1.6667,
        'm': 1.6364,
        'l': 1.6364
      ),
      'text-transform': (
        's': uppercase,
        'm': uppercase,
        'l': uppercase
      ),
      'letter-spacing': (
        's': 0.05em,
        'm': 0.05em,
        'l': 0.05em
      )
    ),
    'icon': (
      'size': (
        's': 14px,
        'm': 14px,
        'l': 14px
      )
    )
  ),

  'search': (
    'foreground': (
      'normal': (
        's': color('blue', 'dark'),
        'm': color('blue', 'dark'),
        'l': color('blue', 'dark')
      ),
      'hover': (
        's': $color-actionable,
        'm': $color-actionable,
        'l': $color-actionable
      ),
      'active': (
        's': $color-actionable,
        'm': $color-actionable,
        'l': $color-actionable
      )
    ),
    'background': (
      'normal': (
        's': color('white'),
        'm': color('white'),
        'l': color('white')
      ),
      'hover': (
        's': color('white'),
        'm': color('white'),
        'l': color('white')
      ),
      'active': (
        's': color('white'),
        'm': color('white'),
        'l': color('white')
      )
    ),
    'font': (
      'font-family': font('body'),
      'font-weight': bold,
      'font-style': normal,
      'font-size': (
        's': 12px,
        'm': initial,
        'l': initial
      ),
      'line-height': (
        's': 1.6667,
        'm': initial,
        'l': initial
      ),
      'text-transform': (
        's': uppercase,
        'm': none,
        'l': none
      ),
      'letter-spacing': (
        's': 0.05em,
        'm': normal,
        'l': normal
      )
    ),
    'icon': (
      'size': (
        's': 17px,
        'm': 17px,
        'l': 17px
      )
    ),
    'padding': (
      'x': (
        's': false,
        'm': false,
        'l': false
      ),
      'y': (
        's': 10px,
        'm': unset,
        'l': unset
      )
    )
  ),

  'librarian': (
    'foreground': (
      'normal': (
        's': color('white'),
        'm': color('white'),
        'l': color('blue', 'mid')
      ),
      'hover': (
        's': color('white'),
        'm': color('white'),
        'l': $color-actionable
      ),
      'active': (
        's': color('white'),
        'm': color('white'),
        'l': $color-actionable
      )
    ),
    'background': (
      'normal': (
        's': $color-actionable,
        'm': $color-actionable,
        'l': color('white')
      ),
      'hover': (
        's': color('blue', 'mid'),
        'm': color('blue', 'mid'),
        'l': color('white')
      ),
      'active': (
        's': color('blue', 'mid'),
        'm': color('blue', 'mid'),
        'l': color('white')
      )
    ),
    'font': (
      'font-family': font('body'),
      'font-weight': bold,
      'font-style': normal,
      'font-size': (
        's': 11px,
        'm': 11px,
        'l': 11px
      ),
      'line-height': (
        's': normal,
        'm': 1.6364,
        'l': 1.6364
      ),
      'text-transform': (
        's': uppercase,
        'm': uppercase,
        'l': uppercase
      ),
      'letter-spacing': (
        's': 0.05em,
        'm': 0.05em,
        'l': 0.05em
      )
    ),
    'icon': (
      'size': (
        's': 24px,
        'm': 24px,
        'l': 14px
      )
    )
  ),

  'toggle': (
    'foreground': (
      'normal': color('blue', 'dark'),
      'hover': $color-actionable,
      'active': $color-actionable
    ),
    'background': (
      'normal': color('white'),
      'hover': color('white'),
      'active': color('white')
    ),
    'font': (
      'font-family': font('body'),
      'font-weight': bold,
      'font-style': normal,
      'font-size': (
        's': 11px,
        'm': 0,
        'l': 0
      ),
      'line-height': (
        's': 1.6364,
        'm': 0,
        'l': 0
      ),
      'text-transform': (
        's': uppercase,
        'm': none,
        'l': none
      ),
      'letter-spacing': (
        's': 0.05em,
        'm': normal,
        'l': normal
      )
    ),
    'icon': (
      'size': (
        's': 24px,
        'm': 0,
        'l': 0
      )
    ),
    'padding': (
      'x': (
        's': false,
        'm': false,
        'l': false
      ),
      'y': (
        's': 10px,
        'm': false,
        'l': false
      )
    )
  ),

  'transition': (
    'duration': $transition-duration,
    'timing': $transition-timing
  ),
  'icon': (
    'offset': ($rhythm-x / 2)
  ),
  'arrow': (
    'color': color('slate'),
    'size': 24px
  ),
  'padding': (
    'x': (
      's': 10px,
      'm': 25px,
      'l': 25px
    ),
    'y': (
      's': false,
      'm': false,
      'l': false
    )
  )

);

/// Defines the nav-button component theme.
///
/// @since 1.0.0
///
/// @requires {function} Brandy::map-deep-get <https://laurenhamel.github.io/brandy/docs/#brandy-maps-function-map-deep-get>
///
/// @param {map} skin - The component's skin
///
/// @output The nav-button component's themeable properties
@mixin atoms-nav-button--theme ( $skin ) {

  // Capture themeable variables from skin.
  $duration: map-deep-get($skin, 'transition.duration');
  $timing: map-deep-get($skin, 'transition.timing');
  $offset: map-deep-get($skin, 'icon.offset');

  // Capture arrow-specific variables.
  $arrow-color: map-deep-get($skin, 'arrow.color');
  $arrow-size: map-deep-get($skin, 'arrow.size');

  // Defines the component's base styles.
  appearance: none;
  border: none;
  background: none;
  transition: all $duration $timing;

  @each $breakpoint, $padding in map-deep-get($skin, 'padding.x') {

    @if ( is-null($padding) == false and $padding != false ) {

      @include breakpoint( screen($breakpoint) ) {
        @include padding-x( $padding );
      };

    }

  }
  @each $breakpoint, $padding in map-deep-get($skin, 'padding.y') {

    @if ( is-null($padding) == false and $padding != false ) {

      @include breakpoint( screen($breakpoint) ) {
        @include padding-y( $padding );
      };

    }

  }

  // Defines main button styles.
  &:not(.-utility):not(.-flyout):not(.-search):not(.-toggle):not(.-librarian),
  &.-main {
    font-family: map-deep-get($skin, 'main.font.font-family');
    font-weight: map-deep-get($skin, 'main.font.font-weight');
    font-style: map-deep-get($skin, 'main.font.font-style');

    @each $breakpoint, $size in map-deep-get($skin, 'main.font.font-size') {

      @include breakpoint( screen($breakpoint) ) {
        font-size: $size;
      };

    }
    @each $breakpoint, $height in map-deep-get($skin, 'main.font.line-height') {

      @include breakpoint( screen($breakpoint) ) {
        line-height: $height;
      };

    }
    @each $breakpoint, $transform in map-deep-get($skin, 'main.font.text-transform') {

      @include breakpoint( screen($breakpoint) ) {
        text-transform: $transform;
      };

    }
    @each $breakpoint, $spacing in map-deep-get($skin, 'main.font.letter-spacing') {

      @include breakpoint( screen($breakpoint) ) {
        letter-spacing: $spacing;
      };

    }

    $foreground: map-deep-get($skin, 'main.foreground');
    $background: map-deep-get($skin, 'main.background');

    // Apply foreground styles.
    @include private('Foreground') {

      $normal: map-get($foreground, 'normal');
      $hover: map-get($foreground, 'hover');
      $active: map-get($foreground, 'active');

      @each $breakpoint, $color in $normal {
        @include breakpoint( screen($breakpoint) ) {
          color: $color;

          .icon {

            svg {
              fill: $color;
            }

          }

        };
      }

      &:hover,
      &:focus,
      &.is-hover,
      &.is-focus {

        @each $breakpoint, $color in $hover {
          @include breakpoint( screen($breakpoint) ) {
            color: $color;

            .icon {

              svg {
                fill: $color;
              }

            }

          };
        }

      }

      &:active,
      &.is-active {

        @each $breakpoint, $color in $active {
          @include breakpoint( screen($breakpoint) ) {
            color: $color;

            .icon {

              svg {
                fill: $color;
              }

            }

          };
        }

      }

    };

    // Apply background styles.
    @include private('Background') {

      $normal: map-get($background, 'normal');
      $hover: map-get($background, 'hover');
      $active: map-get($background, 'active');

      @each $breakpoint, $color in $normal {
        @include breakpoint( screen($breakpoint) ) {
          background-color: $color;
        };
      }

      &:hover,
      &:focus,
      &.is-hover,
      &.is-focus {

        @each $breakpoint, $color in $hover {
          @include breakpoint( screen($breakpoint) ) {
          background-color: $color;
        };
        }

      }

      &:active,
      &.is-active {

        @each $breakpoint, $color in $active {
          @include breakpoint( screen($breakpoint) ) {
            background-color: $color;
          };
        }

      }

    };

    // Don't allow icons on main buttons.
    .icon {
      display: none;
    }

    // Get padding variable for small screens.
    $padding: map-deep-get($skin, 'padding.x.s');

    // Add arrow to button only on small screens.
    padding-right: ($padding * 2) + $arrow-size + $padding;

    // Add icon to button.
    &::after {
      @include tokens-icon('material-chevron_right', $arrow-color, $arrow-size, $pseudo: true);
      @include padding-x( 10px );
      @include absolute( 0 0 0 null );
      @include absolute-center-within-container-y;
      @include absolute-center-contents;
      @include size( $arrow-size );
      color: $arrow-color;
      line-height: 1;
    }

    // Get border-specific variables.
    $border-thickness: map-deep-get($skin, 'main.border.thickness');
    $border-color: map-deep-get($skin, 'main.border.color');

    // Add border to button.
    &::before {
      content: '';
      display: block;
      @include absolute(0 0 null 0);
      height: $border-thickness;
      background-color: $border-color;
      @include margin-x( auto );
      opacity: .15;
      width: calc(100% - #{$padding * 2});
    }

    // Remove border from first button.
    @include first-child {

      // Remove border.
      &::before {
        content: none;
      }

    };

    // Remove arrow from button on larger screens.
    @include breakpoint-m-l {
      padding-right: 10px;

      // Remove icon from button.
      &::after {
        content: none;
      }

      // Remove border from button.
      &::before {
        content: none;
      }

    };

  }

  // Defines toggle button styles.
  &.-toggle {

    // Modifies toggle style.
    @each $breakpoint, $padding in map-deep-get($skin, 'toggle.padding.x') {

      @if ( is-null($padding) == false and $padding != false ) {

        @include breakpoint( screen($breakpoint) ) {
          @include padding-x( $padding );
        };

      }

    }
    @each $breakpoint, $padding in map-deep-get($skin, 'toggle.padding.y') {

      @if ( is-null($padding) == false and $padding != false ) {

        @include breakpoint( screen($breakpoint) ) {
          @include padding-y( $padding );
        };

      }

    }

    $foreground: map-deep-get($skin, 'toggle.foreground');
    $background: map-deep-get($skin, 'toggle.background');

    // Apply foreground styles.
    @include private('Foreground') {

      $normal: map-get($foreground, 'normal');
      $hover: map-get($foreground, 'hover');
      $active: map-get($foreground, 'active');

      color: $normal;

      .icon {

        svg {
          fill: $normal;
        }

      }

      &:hover,
      &:focus,
      &.is-hover,
      &.is-focus {
        color: $hover;

        .icon {

          svg {
            fill: $hover;
          }

        }

      }

      &:active,
      &.is-active {
        color: $active;
      }

    };

    // Apply background styles.
    @include private('Background') {

      $normal: map-get($background, 'normal');
      $hover: map-get($background, 'hover');
      $active: map-get($background, 'active');

      background-color: $normal;

      &:hover,
      &:focus,
      &.is-hover,
      &.is-focus {
        background-color: $hover;
      }

      &:active,
      &.is-active {
        background-color: $active;
      }

    };

     // Assign icon styles.
    .icon {
      margin-right: $offset / 2;
    }

  }

  // Define other style variations for buttons.
  @each $class in ('utility', 'flyout', 'search', 'librarian') {

    &.-#{$class} {

      $foreground: map-deep-get($skin, $class + '.foreground');
      $background: map-deep-get($skin, $class + '.background');

      // Apply foreground styles.
      @include private('Foreground') {

        $normal: map-get($foreground, 'normal');
        $hover: map-get($foreground, 'hover');
        $active: map-get($foreground, 'active');

        @each $breakpoint, $color in $normal {
          @include breakpoint( screen($breakpoint) ) {
            color: $color;

            .icon {

              svg {
                fill: $color;
              }

            }

          };
        }

        &:hover,
        &:focus,
        &.is-hover,
        &.is-focus {

          @each $breakpoint, $color in $hover {
            @include breakpoint( screen($breakpoint) ) {
              color: $color;

              .icon {

                svg {
                  fill: $color;
                }

              }

            };
          }

        }

        &:active,
        &.is-active {

          @each $breakpoint, $color in $active {
            @include breakpoint( screen($breakpoint) ) {
              color: $color;

              .icon {

                svg {
                  fill: $color;
                }

              }

            };
          }

        }

      };

      // Apply background styles.
      @include private('Background') {

        $normal: map-get($background, 'normal');
        $hover: map-get($background, 'hover');
        $active: map-get($background, 'active');

        @each $breakpoint, $color in $normal {
          @include breakpoint( screen($breakpoint) ) {
            background-color: $color;
          };
        }

        &:hover,
        &:focus,
        &.is-hover,
        &.is-focus {

          @each $breakpoint, $color in $hover {
            @include breakpoint( screen($breakpoint) ) {
              background-color: $color;
            };
          }

        }

        :active,
        &.is-active {

          @each $breakpoint, $color in $active {
            @include breakpoint( screen($breakpoint) ) {
              background-color: $color;
            };
          }

        }

      };

    }

  }
  @each $class in ('utility', 'flyout', 'search', 'librarian', 'toggle') {

    &.-#{$class} {
      font-family: map-deep-get($skin, $class + '.font.font-family');
      font-weight: map-deep-get($skin, $class + '.font.font-weight');
      font-style: map-deep-get($skin, $class + '.font.font-style');

      @each $breakpoint, $size in map-deep-get($skin, $class + '.font.font-size') {

        @include breakpoint( screen($breakpoint) ) {
          font-size: $size;
        };

      }
      @each $breakpoint, $height in map-deep-get($skin, $class + '.font.line-height') {

        @include breakpoint( screen($breakpoint) ) {
          line-height: $height;
        };

      }
      @each $breakpoint, $transform in map-deep-get($skin, $class + '.font.text-transform') {

        @include breakpoint( screen($breakpoint) ) {
          text-transform: $transform;
        };

      }
      @each $breakpoint, $spacing in map-deep-get($skin, $class + '.font.letter-spacing') {

        @include breakpoint( screen($breakpoint) ) {
          letter-spacing: $spacing;
        };

      }

    }

  }
  @each $class in ('flyout', 'search', 'librarian', 'toggle') {

    &.-#{$class} {

      .icon  {

        @each $breakpoint, $size in map-deep-get($skin, $class + '.icon.size') {

          @include breakpoint( screen($breakpoint) ) {
            @include size($size);
          };

        }

      }

    }

  }

  // Define search button styles.
  &.-search {
    font-family: map-deep-get($skin, 'search.font.font-family');
    font-weight: map-deep-get($skin, 'search.font.font-weight');
    font-style: map-deep-get($skin, 'search.font.font-style');

    @each $breakpoint, $size in map-deep-get($skin, 'search.font.font-size') {

      @include breakpoint( screen($breakpoint) ) {
        font-size: $size;
      };

    };
    @each $breakpoint, $height in map-deep-get($skin, 'search.font.line-height') {

      @include breakpoint( screen($breakpoint) ) {
        line-height: $height;
      };

    };
    @each $breakpoint, $transform in map-deep-get($skin, 'search.font.text-transform') {

      @include breakpoint( screen($breakpoint) ) {
        text-transform: $transform;
      };

    };
    @each $breakpoint, $spacing in map-deep-get($skin, 'search.font.letter-spacing') {

      @include breakpoint( screen($breakpoint) ) {
        letter-spacing: $spacing;
      };

    };

    // Modifies search style.
    @each $breakpoint, $padding in map-deep-get($skin, 'search.padding.x') {

      @if ( is-null($padding) == false and $padding != false ) {

        @include breakpoint( screen($breakpoint) ) {
          @include padding-x( $padding );
        };

      }

    }
    @each $breakpoint, $padding in map-deep-get($skin, 'search.padding.y') {

      @if ( is-null($padding) == false and $padding != false ) {

        @include breakpoint( screen($breakpoint) ) {
          @include padding-y( $padding );
        };

      }

    }

    // Assign icon styles.
    .icon {
      margin-right: $offset / 2;
      @include size( map-deep-get($skin, 'search.size') );

      @include breakpoint-m-l {
        margin-right: 0;
        @include size( auto );
      };

    }

    // Apply styles for larger screens.
    @include breakpoint-m-l {

      // Don't show label.
      .nav-button-label {
        display: none;
      }

    };

  }

  // Define utility button styles.
  &.-utility {

    // Don't allow icons on utility buttons.
    .icon {
      display: none;
    }

    // Add arrow to button only on small screens.
    padding-right: (10px * 2) + $arrow-size + 10px;

    &::after {
      @include tokens-icon('material-chevron_right', $arrow-color, $arrow-size, $pseudo: true);
      @include padding-x( 10px );
      @include absolute( 0 0 0 null );
      @include absolute-center-within-container-y;
      @include absolute-center-contents;
      @include size( $arrow-size );
      color: $arrow-color;
      line-height: 1;
    }

    // Remove arrow from button on larger screens.
    @include breakpoint-m-l {
      padding-right: 10px;

      &::after {
        content: none;
      }

    };

  }

  // Define flyout button styles.
  &.-flyout {

    // Assign icon styles.
    .icon {
      margin-bottom: ($offset / 2);

      @include breakpoint-m-l {
        margin-right: $offset;
        margin-bottom: 0;
      };

    }

  }

  // Define librarian button styles.
  &.-librarian {

    // Assign icon styles.
    .icon {
      margin-right: $offset;
    }

  }

  // Defines disabled button style.
  &[disabled],
  &.is-disabled {
    opacity: .5;
  }

}