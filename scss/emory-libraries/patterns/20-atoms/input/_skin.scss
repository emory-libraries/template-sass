////
/// @group emory-libraries.patterns.atoms.input
////

/// Defines the base skin of the input component.
///
/// @since 1.0.0
///
/// @type map
$atoms-input: (
  
  'border': (
    'thickness': $border-width-s,
    'color': color('slate')
  ),
  'radius': 5px,
  'alpha': .5,
  'shadow': inset 1px 2px 4px rgba(color('slate'), .5),
  'padding': (
    'x': 20px,
    'y': 10px
  ),
  'spacing': $rhythm-y,
  'foreground': $color-text-dark,
  'background': color('white'),
  'icon': (
    'color': color('blue', 'bright'),
    'size': 20px,
    'spacing': 20px
  ),
  'transition': (
    'duration': $transition-duration,
    'timing': $transition-timing
  ),
  'state': (
    'toggle': (
      'default': false,
      'checked': color('blue')
    ),
    'select': (
      'default': false,
      'focused': color('slate', 'light')
    ),
    'text': (
      'default': false,
      'focused': color('blue', 'bright'),
      'valid': color('ui', 'success'),
      'invalid': color('ui', 'error')
    )
  ),
  'label': (
    'color': color('blue', 'dark'),
    'spacing': (
      'x': ($rhythm-x / 2),
      'y': ($rhythm-y / 2)
    )
  ),
  'checkbox': (
    'size': 15px,
    'buffer': 2.5px
  ),
  'radio': (
    'size': 15px,
    'buffer': 2.5px,
    'fill': 40%,
    'diffuse': 5%
  ),
  'field': (
    'spacing': $rhythm-y,
    'padding': 20px
  ),
  'container': (
    'rows': 2,
    'columns': 2,
    'gap': $rhythm-x
  ),
  'search': (
    'big': (
      'font-family': font('accent'),
      'font-size': 1.56em,
      'line-height': 1.5
    ),
    'small': (
      'font-family': font('body'),
      'font-size': .78em,
      'line-height': 1.7857
    )
  ),
  'select': (
    'inline': (
      'border': (
        'thickness': $border-width-s,
        'color': color('blue', 'bright')
      ),
      'padding': (
        'x': 0px,
        'y': 0px
      ),
      'icon': (
        'color': color('blue', 'bright'),
        'size': 30px,
        'spacing': 10px
      )
    )
  )
  
);


/// Defines the input component theme.
///
/// @since 1.0.0
///
/// @requires {mixin} tokens-text
/// @requires {function} Brandy::map-deep-get <https://laurenhamel.github.io/brandy/docs/#brandy-maps-function-map-deep-get>
/// @requires {mixin} Brandy::placeholder <https://laurenhamel.github.io/brandy/docs/#brandy-selects-mixin-placeholder>
///
/// @param {map} skin - The component's skin
///
/// @output The input component's themeable properties
@mixin atoms-input--theme ( $skin ) {
  
  // Capture the class name.
  $class: &;
  
  // Capture themeable variables from skin.
  $thickness: map-deep-get($skin, 'border.thickness');
  $border: map-deep-get($skin, 'border.color');
  $radius: map-deep-get($skin, 'radius');
  $shadow: map-deep-get($skin, 'shadow');
  $duration: map-deep-get($skin, 'transition.duration');
  $timing: map-deep-get($skin, 'transition.timing');
  $foreground: map-deep-get($skin, 'foreground');
  $background: map-deep-get($skin, 'background');
  $padding-x: map-deep-get($skin, 'padding.x');
  $padding-y: map-deep-get($skin, 'padding.y');
  $spacing: map-deep-get($skin, 'spacing');
  $alpha: map-deep-get($skin, 'alpha');
  
  // Capture icon-specific variables.
  $icon-size: map-deep-get($skin, 'icon.size');
  $icon-color: map-deep-get($skin, 'icon.color');
  $icon-spacing: map-deep-get($skin, 'icon.spacing');
  
  // Capture label-specific variables.
  $label-spacing-x: map-deep-get($skin, 'label.spacing.x');
  $label-spacing-y: map-deep-get($skin, 'label.spacing.y');
  $label-color: map-deep-get($skin, 'label.color');
  
  // Build input component styles.
  background-color: $background;
  border: $thickness solid $border;
  border-radius: $radius;
  box-shadow: $shadow;
  transition: all $duration $timing;
  padding: $padding-y $padding-x;
  margin-bottom: $spacing;
  
  // Apply styles specific to text inputs.
  &,
  &.-text {
    $default: map-deep-get($skin, 'state.text.default');
    $focused: map-deep-get($skin, 'state.text.focused');
    $valid: map-deep-get($skin, 'state.text.valid');
    $invalid: map-deep-get($skin, 'state.text.invalid');
    
    @include tokens-text('body', $foreground);
    border-color: if( is-color($default), $default, $border );
  
    // Change the placeholder styles.
    @include placeholder {
      @include tokens-text('accent', $foreground);
      opacity: .5;
    };
    
    // Apply styles when focused.
    &:focus,
    &.is-focused {
     border-color: $focused; 
    }
    
    // Apply styles when validation succeeds.
    &.is-valid {
      border-color: $valid;
    }
    
    // Apply styles when validation fails.
    &.is-invalid {
      border-color: $invalid;
    }
    
    // Apply styles when disabled.
    &[disabled],
    &.is-disabled {
      opacity: $alpha;
    }
    
  }
  
  // Apply styles to both date and time inputs.
  &.-date,
  &.-time {
    
    // Change the placeholder styles.
    &::-webkit-datetime-edit {
      @include tokens-text('accent', $foreground);
      opacity: .5;
    }
    
  }
  
  // Apply styles to inputs with icons.
  &.-date,
  &.-time,
  &.-select {
    padding-right: ($padding-x + $icon-size + $icon-spacing);
    background-repeat: no-repeat;
    background-size: auto $icon-size;
    background-position: calc(100% - #{$icon-spacing}) center;
  }
  
  // Apply styles specific to search inputs.
  &.-search {
    
    // Change styles when big.
    &.-big {
      $font: map-deep-get($skin, 'search.big');
      
      @include placeholder {
        @include expand-properties($font);
      };
      
    }
    
    // Change styles when small.
    &.-small {
      $font: map-deep-get($skin, 'search.small');
      
      @include placeholder {
        @include expand-properties($font);
      };
      
    }
    
  }
  
  // Apply styles specific to date inputs.
  &.-date { 
    
    $icon: 'material-calendar_today';
  
    // Add icon.
    background-image: icon-url($icon, $icon-color, $icon-size);
    
    &::-webkit-calendar-picker-indicator {
      width: ($icon-spacing + $icon-size);
    }
  
  }
  
  // Apply styles specific to time inputs.
  &.-time { 
  
    $icon: 'material-access_time';
  
    // Add icon.
    background-image: icon-url($icon, $icon-color, $icon-size);
  
  }
  
  // Apply styles specific to select inputs.
  &.-select {
    $default: map-deep-get($skin, 'state.select.default');
    $selected: map-deep-get($skin, 'state.select.focused');
    
    transition: all $duration $timing;
    
    $icon: 'material-keyboard_arrow_down';
  
    // Add icon.
    background-image: icon-url($icon, $icon-color, $icon-size);
    
    &:not(:focus),
    &.is-closed,
    &.is-blurred {
      background-color: if( is-color($default), $default, $background );
    }
    
    &:focus,
    &.is-open,
    &.is-focused {
      background-color: $selected;
    }
    
    // Modifies styles for inline select inputs.
    &.-inline {
      
      // Get inline icon-specific variables.
      $inline-icon-size: map-deep-get($skin, 'select.inline.icon.size');
      $inline-icon-spacing: map-deep-get($skin, 'select.inline.icon.spacing');
      $inline-icon-color: map-deep-get($skin, 'select.inline.icon.color');
      
      // Get inline padding-specific variables.
      $inline-padding-x: map-deep-get($skin, 'select.inline.padding.x');
      $inline-padding-y: map-deep-get($skin, 'select.inline.padding.y');
      
      // Get inline border-specific variables.
      $inline-border-color: map-deep-get($skin, 'select.inline.border.color');
      $inline-border-thickness: map-deep-get($skin, 'select.inline.border.thickness');
      $inline-border-stop: calc(100% - (#{$inline-padding-x} + #{$inline-icon-size} + #{$inline-icon-spacing}));
      
      margin-bottom: 0;
      font: inherit;
      background-color: transparent;
      box-shadow: none;
      color: inherit;
      overflow: auto;
      border-radius: 0;
      border-image: linear-gradient(
        to right, 
        $inline-border-color $inline-border-stop, 
        transparent $inline-border-stop
      ) 1 / 0 0 $inline-border-thickness 0;
      
      padding-left: $inline-padding-x;
      padding-right: calc(#{$inline-padding-x} + #{$inline-icon-size} + #{$inline-icon-spacing});
      @include padding-y( $inline-padding-y );
      
      background-image: icon-url($icon, $inline-icon-color);
      background-size: auto $inline-icon-size;
      background-position: calc(100% - #{$inline-padding-x}) center;
      
      option {
        font-family: font('body');
        font-size: $font-size;
        font-weight: normal;
        font-style: normal;
        text-transform: normal;
        line-height: normal;
      }
      
    }
    
  }
  
  // Apply styles specific to checkbox and radio inputs.
  &.-checkbox,
  &.-radio {
    $default: map-deep-get($skin, 'state.toggle.default');
    $checked: map-deep-get($skin, 'state.toggle.checked');
    
    // Apply styles when not checked.
    &:not(:checked),
    &:not(.is-checked) {
      
      // Overrides styles for adjacent labels when checked.
      + #{$class}-label {
        color: if( is-color($default), $default, $foreground );
      }
      
    }
    
    // Apply styles when checked.
    &:checked,
    &.is-checked {
      
      // Overrides styles for adjacent labels when not checked.
      + #{$class}-label {
        color: $checked;
      }
      
    }
    
    // Overrides styles for adjacent labels.
    + #{$class}-label {
      @include tokens-text;
      transition: all $duration $timing;
    }
    
  }
  
  // Apply styles specific to checkbox inputs.
  &.-checkbox {
    $size: map-deep-get($skin, 'checkbox.size');
    $buffer: map-deep-get($skin, 'checkbox.buffer');
    
    @include size($size);
    background-size: ($size - $buffer) ($size - $buffer);
    border-radius: 0;
    
    &:checked,
    &.is-checked {
      
      $icon: 'material-check';
  
      // Add icon.
      background-image: icon-url($icon, $icon-color, $icon-size);
      
    }
    
  }
  
  // Apply styles specific to radio inputs.
  &.-radio {
    $size: map-deep-get($skin, 'radio.size');
    $buffer: map-deep-get($skin, 'radio.buffer');
    $fill: map-deep-get($skin, 'radio.fill');
    $diffuse: map-deep-get($skin, 'radio.diffuse');
    
    @include size($size);
    background-size: ($size - $buffer) ($size - $buffer);
    border-radius: 100%;
    
    &:checked,
    &.is-checked {
      @include radial-gradient(circle at center, $icon-color $fill, transparent ($fill + $diffuse));
    }
    
  }
  
  // Apply styles specific to input labels.
  &-label {
    $focused: map-deep-get($skin, 'state.text.focused');
    $valid: map-deep-get($skin, 'state.text.valid');
    $invalid: map-deep-get($skin, 'state.text.invalid');
    
    @include tokens-text('label', $label-color);
    
    // Defines the style when not inline.
    &:not(.-inline) {
      @include margin-y( $label-spacing-y );
    }
    
    // Defines the style when inline.
    &.-inline {
      margin-left: $label-spacing-x;
    }
      
    // Apply styles when focused.
    &.is-focused {
     color: $focused;
    }

    // Apply styles when validation succeeds.
    &.is-valid {
      color: $valid;
    }

    // Apply styles when validation fails.
    &.is-invalid {
      color: $invalid;
    }
    
  }

  // Apply styles specific to inputs and labels within a field.
  &-field {
    
    // Apply style when not used inline.
    &:not(.-inline) {
      margin-bottom: $spacing;
      grid-gap: $label-spacing-y;
    }
    
    // Apply styles when used inline.
    &.-inline {
      margin-bottom: ($spacing / 2);
      grid-gap: $label-spacing-x;
    }
    
    // Overrides base input styles.
    #{$class}:not(.-checkbox):not(.-radio):not(.-select),
    #{$class}.-text {
      $focused: map-deep-get($skin, 'state.text.focused');
      $valid: map-deep-get($skin, 'state.text.valid');
      $invalid: map-deep-get($skin, 'state.text.invalid');
      
      // Apply styles when focused.
      &:focus,
      &.is-focused {

        // Overrides styles for adjacent labels when focused.
        + #{$class}-label {
          color: $focused;
        }

      }

      // Apply styles when validation succeeds.
      &.is-valid {

        // Overrides styles for adjacent labels when validation succeeds.
        + #{$class}-label {
          color: $valid;
        }

      }

      // Apply styles when validation fails.
      &.is-invalid {

        // Overrides styles for adjacent labels when validation fails.
        + #{$class}-label {
          color: $invalid;
        }

      }
      
    }
    
  }

  // Apply styles specific to input container.
  &-container {
    $rows: map-deep-get($skin, 'container.rows');
    $columns: map-deep-get($skin, 'container.columns');
    $gap: map-deep-get($skin, 'container.gap');
    
    margin-bottom: $spacing;
    
    #{$class} {
      margin-bottom: 0;
    }
    
    &.-row {
      --columns: #{$columns};
      --layout: repeat(var(--columns), auto);
      --flow: column;
      --auto: min-content;
      --gap: #{$gap};
      grid-template-columns: var(--layout);
      grid-template-rows: min-content;
      grid-auto-flow: var(--flow);
      grid-auto-columns: var(--auto);
      grid-gap: var(--gap);
    }
    
    &.-column {
      --rows: #{$rows};
      --layout: repeat(var(--rows), auto);
      --flow: row;
      --auto: min-content;
      --gap: #{$gap};
      grid-template-columns: 1fr;
      grid-template-rows: var(--layout);
      grid-auto-flow: var(--flow);
      grid-auto-rows: var(--auto);
      grid-gap: var(--gap);
    }
    
    &.-grid {
      --columns: #{$columns};
      --rows: #{$rows};
      --gap: #{$gap};
      --gap-rows: #{$gap};
      --gap-columns: #{$gap};
      --layout-rows: repeat(var(--rows), auto);
      --layout-columns: repeat(var(--columns), auto);
      --auto-rows: min-content;
      --auto-columns: min-content;
      grid-template-columns: var(--layout-columns);
      grid-template-rows: var(--layout-rows);
      grid-auto-rows: var(--auto-rows);
      grid-auto-columns: var(--auto-columns);
      grid-gap: var(--gap);
      grid-row-gap: var(--gap-rows);
      grid-column-gap: var(--gap-columns);
    }
    
  }

  // Apply styles specific to input group wrappers.
  &-group {
    @include margin-y( $spacing );
  }
  
}