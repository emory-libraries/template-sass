////
/// @group emory-libraries.patterns.atoms.input
////

/// Defines the base skin of the input component.
///
/// @since 1.0.0
///
/// @type map
$atoms-input: (
  
  'border': (
    'thickness': $border-width-s,
    'color': color('slate')
  ),
  'radius': 5px,
  'shadow': inset 1px 2px 4px rgba(color('slate'), .5),
  'foreground': $color-text-dark,
  'background': color('white'),
  'transition': (
    'duration': $transition-duration,
    'timing': $transition-timing
  ),
  'state': (
    'toggle': (
      'default': false,
      'checked': color('blue')
    ),
    'select': (
      'default': false,
      'focused': color('slate', 'light')
    ),
    'text': (
      'default': false,
      'focused': color('blue', 'bright'),
      'valid': color('ui', 'success'),
      'invalid': color('ui', 'error')
    )
  ),
  'label': color('blue', 'dark')
  
);


/// Defines the input component theme.
///
/// @since 1.0.0
///
/// @requires {mixin} tokens-text
/// @requires {function} Brandy::map-deep-get <https://laurenhamel.github.io/brandy/docs/#brandy-maps-function-map-deep-get>
/// @requires {mixin} Brandy::placeholder <https://laurenhamel.github.io/brandy/docs/#brandy-selects-mixin-placeholder>
///
/// @param {map} skin - The component's skin
///
/// @output The input component's themeable properties
@mixin atoms-input--theme ( $skin ) {
  
  // Capture the class name.
  $class: &;
  
  // Capture themeable variables from skin.
  $thickness: map-deep-get($skin, 'border.thickness');
  $border: map-deep-get($skin, 'border.color');
  $radius: map-deep-get($skin, 'radius');
  $shadow: map-deep-get($skin, 'shadow');
  $duration: map-deep-get($skin, 'transition.duration');
  $timing: map-deep-get($skin, 'transition.timing');
  $foreground: map-deep-get($skin, 'foreground');
  $background: map-deep-get($skin, 'background');
  
  // Build input component styles.
  background-color: $background;
  border: $thickness solid $border;
  border-radius: $radius;
  box-shadow: $shadow;
  transition: all $duration $timing;
  
  // Apply styles specific to text inputs.
  &,
  &.-text {
    $default: map-deep-get($skin, 'state.text.default');
    $focused: map-deep-get($skin, 'state.text.focused');
    $valid: map-deep-get($skin, 'state.text.valid');
    $invalid: map-deep-get($skin, 'state.text.invalid');
    
    @include tokens-text('body', $foreground);
    border-color: if( is-color($default), $default, $border );
  
    // Change the placeholder styles.
    @include placeholder {
      @include tokens-text('accent', $foreground);
      opacity: .5;
    };
    
    // Apply styles when focused.
    &:focus,
    &.is-focused {
     border-color: $focused; 
    }
    
    // Apply styles when validation succeeds.
    &.is-valid {
      border-color: $valid;
    }
    
    // Apply styles when validation fails.
    &.is-invalid {
      border-color: $invalid;
    }
    
  }
  
  // Apply styles to both date and time inputs.
  &.-date,
  &.-time {
    
    // Change the placeholder styles.
    &::-webkit-datetime-edit {
      @include tokens-text('accent', $foreground);
      opacity: .5;
    }
    
  }
  
  // Apply styles specific to date inputs.
  &.-date { }
  
  // Apply styles specific to time inputs.
  &.-time { }
  
  // Apply styles specific to select inputs.
  &.-select {
    $default: map-deep-get($skin, 'state.select.default');
    $selected: map-deep-get($skin, 'state.select.focused');
    
    transition: all $duration $timing;
    
    &:not(:focus),
    &.is-closed {
      background-color: if( is-color($default), $default, $background );
    }
    
    &:focus,
    &.is-open {
      background-color: $selected;
    }
    
  }
  
  // Apply styles specific to checkbox and radio inputs.
  &.-checkbox,
  &.-radio {
    $default: map-deep-get($skin, 'state.toggle.default');
    $checked: map-deep-get($skin, 'state.toggle.checked');
    
    // Apply styles when not checked.
    &:not(:checked),
    &:not(.is-checked) {
      
      // Overrides styles for adjacent labels when checked.
      + #{$class}-label {
        color: if( is-color($default), $default, $foreground );
      }
      
    }
    
    // Apply styles when checked.
    &:checked,
    &.is-checked {
      
      // Overrides styles for adjacent labels when not checked.
      + #{$class}-label {
        color: $checked;
      }
      
    }
    
    // Overrides styles for adjacent labels.
    + #{$class}-label {
      @include tokens-text;
      transition: all $duration $timing;
    }
    
  }
  
  // Apply styles specific to checkbox inputs.
  &.-checkbox {
    border-radius: 0;
  }
  
  // Apply styles specific to radio inputs.
  &.-radio {
    border-radius: 100%;
  }
  
  // Apply styles specific to input labels.
  &-label {
    $color: map-deep-get($skin, 'label');
    $focused: map-deep-get($skin, 'state.text.focused');
    $valid: map-deep-get($skin, 'state.text.valid');
    $invalid: map-deep-get($skin, 'state.text.invalid');
    
    @include tokens-text('label', $color);
      
    // Apply styles when focused.
    &.is-focused {
     color: $focused;
    }

    // Apply styles when validation succeeds.
    &.is-valid {
      color: $valid;
    }

    // Apply styles when validation fails.
    &.is-invalid {
      color: $invalid;
    }
    
  }

  // Apply styles specific to inputs and labels within a field.
  &-field {

    // Overrides base input styles.
    #{$class}:not(.-checkbox):not(.-radio):not(.-select),
    #{$class}.-text {
      $focused: map-deep-get($skin, 'state.text.focused');
      $valid: map-deep-get($skin, 'state.text.valid');
      $invalid: map-deep-get($skin, 'state.text.invalid');
      
      // Apply styles when focused.
      &:focus,
      &.is-focused {

        // Overrides styles for adjacent labels when focused.
        + #{$class}-label {
          color: $focused;
        }

      }

      // Apply styles when validation succeeds.
      &.is-valid {

        // Overrides styles for adjacent labels when validation succeeds.
        + #{$class}-label {
          color: $valid;
        }

      }

      // Apply styles when validation fails.
      &.is-invalid {

        // Overrides styles for adjacent labels when validation fails.
        + #{$class}-label {
          color: $invalid;
        }

      }
      
    }
    
  }
  
}