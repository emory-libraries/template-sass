////
/// @group emory-libraries.utils.functions
////

/// Default to a certain value if no other given values are set.
/// 
/// @since 1.0.0
///
/// @param {arglist} values - Some values to use in order of preference, where the last value is the default
///
/// @returns {mixed} The first value that is set or the default value
@function default( $values.../*, $default*/ ) {
  
  // Get the default value.
  $default: last($values);
  
  // Get the desired values in order of preference.
  $values: head($values);
  
  // Try to use any of the given values.
  @each $value in $values {
    
    // See if the value is valid.
    @if( $value != false and is-null($value) == false ) {
      
      // Use the value if valid.
      @return $value;
      
    }
    
  }
  
  // Otherwise, return the default.
  @return $default;
  
}

/// Default to a certain value if no other given value passes the condition test.
/// 
/// @since 1.0.0
///
/// @param {string} condition - The name of a function to be used as the test condition
/// @param {arglist} values - Some values to use in order of preference, where the last value is the default
///
/// @returns {mixed} The first value that meets the condition or the default value
@function default-if( $condition, $values.../*, $default*/ ) {
  
  // Get the default value.
  $default: last($values);
  
  // Get the desired values in order of preference.
  $values: head($values);
  
  // Try to use any of the given values.
  @each $value in $values {
    
    // See if the value is valid.
    @if( call(get-function($condition), $value) == true ) {
      
      // Use the value if valid.
      @return $value;
      
    }
    
  }
  
  // Otherwise, return the default.
  @return $default;
  
}

/// Default to a certain value if no other given value fails the condition test.
/// 
/// @since 1.0.0
///
/// @param {string} condition - The name of a function to be used as the test condition
/// @param {arglist} values - Some values to use in order of preference, where the last value is the default
///
/// @returns {mixed} The first value that does not meet the condition or the default value
@function default-if-not( $condition, $values.../*, $default*/ ) {
  
  // Get the default value.
  $default: last($values);
  
  // Get the desired values in order of preference.
  $values: head($values);
  
  // Try to use any of the given values.
  @each $value in $values {
    
    // See if the value is valid.
    @if( call(get-function($condition), $value) == false ) {
      
      // Use the value if valid.
      @return $value;
      
    }
    
  }
  
  // Otherwise, return the default.
  @return $default;
  
}

/// Conditionally make a property value `!important` if a flag is set.
/// 
/// @since 1.0.0
///
/// @param {mixed} value - Some property value
/// @param {boolean} important [false] - A flag indicating whether the value should be `!important`
///
/// @returns {mixed} The given value either with or without !important
@function important( $value, $important: false ) {
  
  // The value is !important.
  @if( $important == true ) { @return $value !important; }
  
  // Otherwise, the value is not !important.
  @return $value;
  
}

/// Gets a positional value from a base property value.
///
/// @since 1.0.0
///
/// @param {list} value - The base property value that a positional value should be extracted from.
/// @param {string} position [null] - The positional value to extract if given.
///
/// @returns {mixed} The positional value extracted from the base property value.
@function positional-value( $value, $position: null ) {
  
  // Initialize positional values.
  $positions: (
    top: null,
    right: null,
    bottom: null,
    left: null
  );
  
  // Extract positional values.
  @if( length($value) == 1 ) {
    
    $positions: map-set($positions, top, $value);
    $positions: map-set($positions, right, $value);
    $positions: map-set($positions, bottom, $value);
    $positions: map-set($positions, left, $value);
    
  }
  @else if( length($value) == 2 ) {
    
    $positions: map-set($positions, top, nth($value, 1));
    $positions: map-set($positions, right, nth($value, 2));
    $positions: map-set($positions, bottom, nth($value, 1));
    $positions: map-set($positions, left, nth($value, 2));
    
  }
  @else if( length($value) == 3 ) {
    
    $positions: map-set($positions, top, nth($value, 1));
    $positions: map-set($positions, right, nth($value, 2));
    $positions: map-set($positions, bottom, nth($value, 3));
    $positions: map-set($positions, left, nth($value, 2));
    
  }
  @else if( length($value) == 4 ) {
    
    $positions: map-set($positions, top, nth($value, 1));
    $positions: map-set($positions, right, nth($value, 2));
    $positions: map-set($positions, bottom, nth($value, 3));
    $positions: map-set($positions, left, nth($value, 4));
    
  }
  
  // Return the position.
  @if( $position != null ) { @return map-get($positions, $position); }
  
  // Otherwise, return all positions.
  @return $positions;
  
}